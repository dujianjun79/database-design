CREATE TABLE EMPLOYEE(
SSN INT NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR(15) NOT NULL,
MIDDLE_NAME VARCHAR(10),
LAST_NAME VARCHR(15) NOT NULL,
ADDRESS VARCHAR(100) NOT NULL,
PHONE VARCHAR(15),
SALARY DECIMAL(10,2) NOT NULL,
GENDER CHAR(1) NOT NULL,
START_DATE DATE NOT NULL,
BIRTHDAY DATE
);

CREATE TABLE DENTIST(
SSN INT NOT NULL PRIMARY KEY,
MEDICAL_LICENSE VARCHAR(15),
SPECIALTY VARCHAR(15),
DEGREE VARCHAR(15) NOT NULL
);

CREATE TABLE SECRETARY(
SSN INT NOT NULL PRIMARY KEY,
TYPING_SPEED INT NOT NULL
);

CREATE TABLE ASSISTANT(
SSN INT NOT NULL PRIMARY KEY,
DEGREE VARCHAR(15) NOT NULL
);

CREATE TABLE CUSTOMER(
CUSTOMER_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
SSN INT,
FIRST_NAME VARCHAR(15) NOT NULL,
MIDDLE_NAME VARCHAR(15),
LAST_NAME VARCHAR(15) NOT NULL,
ADDRESS VARCHAR(50) NOT NULL,
PHONE VARCHAR(15),
BIRTHDAY DATE,
HEALTHINSURANCE_ID VARCHAR(20)
);

CREATE TABLE APPOINTMENT(
APPOINTMENT_NO INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
APPONITMENT_DATE DATE NOT NULL,
APPONITMENT_TIME TIME NOT NULL,
CID INT NOT NULL,
SCTSSN INT,
MAKE_DATE DATE NOT NULL,
DSSN INT,
RNO INT NOT NULL
);

CREATE TABLE bill (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
appointmentid INT NOT NULL,
totalamount DECIMAL(10,2) NOT NULL,
covered_by_insurance DECIMAL(10,2) NOT NULL,
due_date DATE NOT NULL
)

CREATE TABLE DIAGNOSIS(
PROBLEM_NO INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
PROBLEM_DESCRIPTION VARCHAR(200) NOT NULL,
PROBLEM_NAME VARCHAR(30) NOT NULL
);

CREATE TABLE TREATMENT(
TREATMENT_NO INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
TREATMENT_DESCRIPTION VARCHAR(200) NOT NULL,
TREATMENT_NAME VARCHAR(30) NOT NULL
);

CREATE TABLE PRESCRIPTION(
PRESCRIPTION_NO INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
PRESCRIPTION_DATE DATE NOT NULL,
APPOINTMENT_NO INT
);

CREATE TABLE MEDICINE(
MEDICINE_ID INT NOT NULL PRIMARY KEY,
MEDICINE_NAME VARCHAR(30) NOT NULL,
PHARMACEUTICAL_COMPANY VARCHAR(30) NOT NULL
);

CREATE TABLE OPERATION_ROOM(
ROOM_NO INT NOT NULL PRIMARY KEY
);

CREATE TABLE ASSET(
ASSET_ID INT NOT NULL PRIMARY KEY,
BRAND VARCHAR(30),
PURCHARSE_DATE DATE NOT NULL,
ESSN INT NOT NULL
);

CREATE TABLE EQUIPMENT(
ASSET_ID INT NOT NULL PRIMARY KEY,
MODEL VARCHAR(30),
ROOM_NO INT
);

CREATE TABLE SUPPLIES(
ASSET_ID INT NOT NULL PRIMARY KEY,
UPC_BARCODE INT NOT NULL,
QUANTITY INT NOT NULL,
EXPIRY_DATE DATE NOT NULL,
APPOINTMENT_NO INT
);

CREATE TABLE ASSIST(
ASSN INT NOT NULL,
DSSN INT NOT NULL,
OPERATION_DATE DATE NOT NULL,
START_TIME TIME,
END_TIME TIME,
PRIMARY KEY(ASSN,DSSN)
);

CREATE TABLE HAS(
APPOINTMENT_NO INT NOT NULL,
PROBLEM_NO INT NOT NULL,
FDI_NO INT,
IS_BABY_TOOTH CHAR(1),
PRIMARY KEY(APPOINTMENT_NO,PROBLEM_NO)
);

CREATE TABLE SUGGESTS(
PROBLEM_NO INT NOT NULL,
TREATMENT_NO INT NOT NULL,
PRIMARY KEY(PROBLEM_NO,TREATMENT_NO)
);

CREATE TABLE DETERMINES(
APPOINTMENT_NO INT NOT NULL,
TREATMENT_NO INT NOT NULL,
FDI_NO INT,
IS_BABY_TOOTH CHAR(1),
PRIMARY KEY(APPOINTMENT_NO,TREATMENT_NO)
);

CREATE TABLE INCLUDES(
PRESCRIPTION_NO INT NOT NULL,
MEDICINE_ID INT NOT  NULL,
QUANTITY INT NOT NULL,
PRIMARY KEY(PRESCRIPTION_NO,MEDICINE_ID)
);

CREATE TABLE CUS_ALLERGY(
CUSTOMER_ID INT NOT NULL,
CALLERGY VARCHAR(100),
PRIMARY KEY(CUSTOMER_ID,CALLERGY)
);

CREATE TABLE CUS_FAMILY_HISTORY(
CUSTOMER_ID INT NOT NULL,
CFHISTORY VARCHAR(200),
PRIMARY KEY(CUSTOMER_ID,CFHISTORY)
);

ALTER TABLE APPOINTMENT 
ADD FOREIGN KEY (CID) REFERENCES CUSTOMER(CUSTOMER_ID),
ADD FOREIGN KEY (SCTSSN) REFERENCES SECRETARY(SSN),
ADD FOREIGN KEY (DSSN) REFERENCES DENTIST(SSN),
ADD FOREIGN KEY (RNO) REFERENCES OPERATION_ROOM(ROOM_NO);

ALTER TABLE BILL 
ADD FOREIGN KEY (appointmentid) REFERENCES APPOINTMENT(APPOINTMENT_NO);

ALTER TABLE PRESCRIPTION 
ADD FOREIGN KEY (APPOINTMENT_NO) REFERENCES APPOINTMENT(APPOINTMENT_NO);

ALTER TABLE ASSET 
ADD FOREIGN KEY (ESSN) REFERENCES EMPLOYEE (SSN);

ALTER TABLE EQUIPMENT 
ADD FOREIGN KEY (ROOM_NO) REFERENCES OPERATION_ROOM(ROOM_NO);

ALTER TABLE SUPPLIES 
ADD FOREIGN KEY (APPOINTMENT_NO) REFERENCES APPOINTMENT(APPOINTMENT_NO);

ALTER TABLE ASSIST 
ADD FOREIGN KEY(ASSN) REFERENCES ASSISTANT(SSN),
ADD FOREIGN KEY(DSSN) REFERENCES DENTIST(SSN);

ALTER TABLE HAS 
ADD FOREIGN KEY (APPOINTMENT_NO) REFERENCES APPOINTMENT(APPOINTMENT_NO),
ADD FOREIGN KEY (PROBLEM_NO) REFERENCES DIAGNOSIS(PROBLEM_NO);

ALTER TABLE SUGGESTS 
ADD FOREIGN KEY (PROBLEM_NO) REFERENCES DIAGNOSIS(PROBLEM_NO),
ADD FOREIGN KEY (TREATMENT_NO) REFERENCES TREATMENT(TREATMENT_NO);

ALTER TABLE DETERMINES 
ADD FOREIGN KEY (APPOINTMENT_NO) REFERENCES APPOINTMENT(APPOINTMENT_NO),
ADD FOREIGN KEY (TREATMENT_NO) REFERENCES TREATMENT(TREATMENT_NO);

ALTER TABLE INCLUDES 
ADD FOREIGN KEY (PRESCRIPTION_NO) REFERENCES PRESCRIPTION(PRESCRIPTION_NO),
ADD FOREIGN KEY (MEDICINE_ID) REFERENCES MEDICINE(MEDICINE_ID);

ALTER TABLE CUS_ALLERGY 
ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID);

ALTER TABLE CUS_FAMILY_HISTORY 
ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID);

//This procedure is used to find all appointment made to a dentist
DELIMITER $$
USE DENTIST $$
CREATE DEFINER=`root`@`127.0.0.1` 
PROCEDURE PROC1(IN DENTIST_SSN INT)
BEGIN 
SELECT APPOINTMENT_DATE, APPOINTMENT_TIME
FROM APPOINTMENT,DENTIST 
WHERE SSN=DSSN AND DSSN=DENTIST_SSN;
END$$
DELIMITER;

//This procedure is to find out the total amount of bills a customer owns
DELIMITER $$
USE DENTIST$$ 
CREATE PROCEDURE PROC2(INT VAR1 INT)
BEGIN 
SELECT SUM(total_amount)
FROM CUSTOMER NATURAL JOIN BILL NATURAL JOIN APPOINTMENT
WHERE CUSTOMER.CUSTOMER_ID=VAR1;
END$$
DELIMITER;

//This trigger is used to check if the due_date already passed the current date.
DELIMITER $$
CREATE TRIGGER TRIG1 BEFORE INSERT ON BILL 
FOR EACH ROW BEGIN 
    IF(BILL.due_date<CURRENT_DATE) THEN 
	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'DUE DATE IS NOT RIGHT!';
    END IF;
END$$
DELIMITER;

//This trigger is used to check if there is a same appointment existing in the table
DELIMITER $$
CREATE TRIGGER TRIG2 BEFORE INSERT ON APPOINTMENT
FOR EACH ROW BEGIN
   IF (EXISTS(SELECT 1 FROM APPOINTMENT WHERE APPOINTMENT_DATE = NEW.APPOINTMENT_DATE AND APPOINTMENT_TIME=NEW.APPOINTMENT_TIME)) THEN
     SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'DUPLICATED APPOINTMENT';
   END IF;
END$$
DELIMITER ;